
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;

/******************************************************************************
 * File:NewJFrame.java
 * Course: 17655
 * Project: Assignment 2
 * Copyright: Copyright (c) 2009 Carnegie Mellon University
 * Versions:
 *	1.0 November 2009 - Initial rewrite of original assignment 2 (ajl).
 *
 * This class defines a GUI application that allows inventory to be added to the
 * inventory databases. There are tree tables in the inventory database: trees,
 * shrubs, and seeds.
 *
 ******************************************************************************/
/*
 * AddInventoryMainFrame.java
 *
 * Created on Jan 29, 2010, 9:24:23 PM
 */

/**
 *
 * @author lattanze
 */
public class InventoryMainFrame extends javax.swing.JFrame {

       String versionID = "v2.10.10";

    /** Creates new form AddInventoryMainFrame */
    public InventoryMainFrame() {
        initComponents();
        jLabel1.setText("Inventory Management Application " + versionID);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRadioButton1.setText("Trees");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("Shrubs");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.setText("Seeds");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("EEPs Inventory Management Application");

        jLabel2.setText("Product ID");

        jLabel3.setText("Price");

        jLabel4.setText("Quantity");

        jTextField1.setText("localhost");

        jButton1.setText("Add Item");
        jButton1.setActionCommand("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setText("Product Description");

        jLabel6.setText("Database Server IP");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton2.setText("List Inventory");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Item");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Decrement");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setText("Deletes item selected from list ");

        jLabel8.setText("Decrements inventory count of item selected from the list");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField3)
                                    .addComponent(jTextField4)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton1)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jRadioButton2))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 920, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 10, Short.MAX_VALUE))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(17, 17, 17)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton3)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton2)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton4)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        jRadioButton1.setSelected(true);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);

    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(true);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(true);        
        jRadioButton3.setSelected(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Adds inventory to database

        Boolean connectError = false;   // Error flag
        Connection DBConn = null;       // MySQL connection handle
        String description;             // Tree, seed, or shrub description
        Boolean executeError = false;   // Error flag
        String errString = null;        // String for displaying errors
        int executeUpdateVal;           // Return value from execute indicating effected rows
        Boolean fieldError = false;     // Error flag
        String msgString = null;        // String for displaying non-error messages
        ResultSet res = null;           // SQL query result set pointer
        String tableSelected = null;    // String used to determine which data table to use
        Integer quantity;               // Quantity of trees, seeds, or shrubs
        Float perUnitCost;              // Cost per tree, seed, or shrub unit
        String productID = null;        // Product id of tree, seed, or shrub
        java.sql.Statement s = null;    // SQL statement pointer
        String SQLstatement = null;     // String for building SQL queries
        
        // Check to make sure a radio button is selected
       
        jTextArea1.setText("");
        
        if (!jRadioButton1.isSelected() && !jRadioButton2.isSelected() && !jRadioButton3.isSelected())
        {
            fieldError = true;
            jTextArea1.append("\nMust select Tree, Seeds, or Shrubs radio button.");

        } else {
       
            //Make sure there is a product description
            if ( jTextField5.getText().length() == 0 )
            {
                fieldError = true;
                jTextArea1.append("\nMust enter a product description.");
                
            } else {
     
                //Make sure there is a product ID
                if ( jTextField2.getText().length() == 0 )
                {
                    fieldError = true;
                    jTextArea1.append("\nMust enter a product ID.");
                } else {
            
                    //Make sure there is a price
                    if ( jTextField3.getText().length() == 0 )
                    {
                        fieldError = true;
                        jTextArea1.append("\nMust enter a product price.");
                    } else {
                    
                        //Make sure quantity is specified
                        if ( jTextField4.getText().length() == 0 )
                        {
                            fieldError = true;
                            jTextArea1.append("\nMust enter a product quantity.");
                        } // quantity
                    } // price
                } // product ID
            } //product description
        } //category selected

        //Now, if there was no error in the data fields, we try to
        //connect to the database.
        
        if ( !fieldError )
        {
            try
            {
                msgString = ">> Establishing Driver...";
                jTextArea1.setText("\n"+msgString);

                //load JDBC driver class for MySQL
                Class.forName( "com.mysql.jdbc.Driver" );

                msgString = ">> Setting up URL...";
                jTextArea1.append("\n"+msgString);

                //define the data source
                String SQLServerIP = jTextField1.getText();
                String sourceURL = "jdbc:mysql://" + SQLServerIP + ":3306/inventory";

                msgString = ">> Establishing connection with: " + sourceURL + "...";
                jTextArea1.append("\n"+msgString);

                //create a connection to the db
                DBConn = DriverManager.getConnection(sourceURL,"remote","remote_pass");

            } catch (Exception e) {

                errString =  "\nProblem connecting to database:: " + e;
                jTextArea1.append(errString);
                connectError = true;

            } // end try-catch
        } // fieldError check

        //If there is not connection error, then we form the SQL statement
        //and then execute it.

        if (!connectError && !fieldError )
        {
            try
            {
                // get the data from the text fields
                description = jTextField5.getText();
                productID = jTextField2.getText();
                quantity = Integer.parseInt(jTextField4.getText());
                perUnitCost = Float.parseFloat(jTextField3.getText());

                // create an SQL statement variable and create the INSERT
                // query to insert the new inventory into the database

                s = DBConn.createStatement();

                // if trees are selected then insert inventory into trees
                // table
                if (jRadioButton1.isSelected())
                {
                    SQLstatement = ( "INSERT INTO trees (product_code, " +
                            "description, quantity, price) VALUES ( '" +
                            productID + "', " + "'" + description + "', " +
                            quantity + ", " + perUnitCost + ");");
                    
                    tableSelected = "TREES";

                }

                // if shrubs are selected then insert inventory into strubs
                // table
                if (jRadioButton2.isSelected())
                {
                    SQLstatement = ( "INSERT INTO shrubs (product_code, " +
                            "description, quantity, price) VALUES ( '" +
                            productID + "', " + "'" + description + "', " +
                            quantity + ", " + perUnitCost + ");");
                    
                    tableSelected = "SHRUBS";
                }

                // if seeds are selected then insert inventory into seeds
                // table
                if (jRadioButton3.isSelected())
                {
                    SQLstatement = ( "INSERT INTO seeds (product_code, " +
                            "description, quantity, price) VALUES ( '" +
                            productID + "', " + "'" + description + "', " +
                            quantity + ", " + perUnitCost + ");");
                    
                    tableSelected = "SEEDS";
                }

                // execute the update
                executeUpdateVal = s.executeUpdate(SQLstatement);

                // let the user know all went well

                jTextArea1.append("\nINVENTORY UPDATED... The following was added to the " + tableSelected + " inventory...\n");
                jTextArea1.append("\nProduct Code:: " + productID);
                jTextArea1.append("\nDescription::  " + description);
                jTextArea1.append("\nQuantity::     " + quantity);
                jTextArea1.append("\nUnit Cost::    " + perUnitCost);

            } catch (Exception e) {

                errString =  "\nProblem adding inventory:: " + e;
                jTextArea1.append(errString);
                executeError = true;

            } // try

        } //execute SQL check

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // This button will list the inventory for the product selected by the
        // radio button

        Boolean connectError = false;   // Error flag
        Connection DBConn = null;       // MySQL connection handle
        Boolean executeError = false;   // Error flag
        String errString = null;        // String for displaying errors
        Boolean fieldError = true;      // Error flag
        String msgString = null;        // String for displaying non-error messages
        ResultSet res = null;           // SQL query result set pointer
        String tableSelected = null;    // String used to determine which data table to use
        java.sql.Statement s = null;    // SQL statement pointer

        // Check to make sure a radio button is selected
        if (jRadioButton1.isSelected() || jRadioButton2.isSelected() || jRadioButton3.isSelected())
        {
            fieldError = false;

        } else {

            msgString = "Must select Tree, Seeds, or Shrubs radio button.";
            jTextArea1.setText("\n"+msgString);
        }


        //Now, we try to connect to the inventory database.
        if (!fieldError)
        {
            //Clear the fields - they are not needed and may cause confusion
            jTextField2.setText("");
            jTextField3.setText("");
            jTextField4.setText("");
            jTextField5.setText("");
            jTextArea1.setText("");
            
            try
            {
                msgString = ">> Establishing Driver...";
                jTextArea1.setText("\n"+msgString);

                //load JDBC driver class for MySQL
                Class.forName( "com.mysql.jdbc.Driver" );

                msgString = ">> Setting up URL...";
                jTextArea1.append("\n"+msgString);

                //define the data source
                String SQLServerIP = jTextField1.getText();
                String sourceURL = "jdbc:mysql://" + SQLServerIP + ":3306/inventory";

                msgString = ">> Establishing connection with: " + sourceURL + "...";
                jTextArea1.append("\n"+msgString);

                //create a connection to the db
                DBConn = DriverManager.getConnection(sourceURL,"remote","remote_pass");

            } catch (Exception e) {

                errString =  "\nProblem connecting to database:: " + e;
                jTextArea1.append(errString);
                connectError = true;

            } // end try-catch

        } // fielderror check - make sure a product is selected
    
        //If there is not connection error, then we form the SQL statement
        //and then execute it.

        if (!connectError && !fieldError)
        {
            try
            {
                // create an SQL statement variable and create the INSERT
                // query to insert the new inventory into the database

                s = DBConn.createStatement();

                // now we build a query to list the inventory table contents
                // for the user
                // ... here is the SQL for trees
                if (jRadioButton1.isSelected())
                {
                    res = s.executeQuery( "Select * from trees" );
                    tableSelected = "TREE";
                }
                // ... here is the SQL for shrubs
                if (jRadioButton2.isSelected())
                {
                    res = s.executeQuery( "Select * from shrubs" );
                    tableSelected = "SHRUB";
                }
                // ... here is the SQL for seeds
                if (jRadioButton3.isSelected())
                {
                    res = s.executeQuery( "Select * from seeds" );
                    tableSelected = "SEED";
                }

                // Now we list the inventory for the selected table
                jTextArea1.setText("");
                while (res.next())
                {
                    msgString = tableSelected+">>" + res.getString(1) + "::" + res.getString(2) +
                            " :: "+ res.getString(3) + "::" + res.getString(4);
                    jTextArea1.append("\n"+msgString);

                } // while

            } catch(Exception e) {

                errString =  "\nProblem with " + tableSelected +" query:: " + e;
                jTextArea1.append(errString);
                executeError = true;

            } // try
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Deletes an item from the database
        
        int beginIndex;                     // Parsing index
        int endIndex;                       // Parsing index
        String productID = null;            // Product ID pnemonic
        Boolean IndexNotFound;              // Flag indicating a string index was not found.
        Boolean connectError = false;       // Error flag
        Connection DBConn = null;           // MySQL connection handle
        String errString = null;            // String for displaying errors
        int executeUpdateVal;               // Return value from execute indicating effected rows
        String msgString = null;            // String for displaying non-error messages
        String tableSelected = null;        // String used to determine which data table to use
        java.sql.Statement s = null;        // SQL statement pointer
        String SQLstatement = null;         // String for building SQL queries
        String inventorySelection = null;   // Inventory text string selected by user
        IndexNotFound = false;              // Flag indicating that a string index was not found
        
        // this is the selected line of text
        inventorySelection =  jTextArea1.getSelectedText();

        // make sure the selection is not blank
        if ( inventorySelection != null )
        {
            // get the product ID - here we get the leading index
            beginIndex = 0;
            endIndex = inventorySelection.indexOf(">>",beginIndex);

            if (endIndex < 0 ) {
                IndexNotFound = true;
            } else {
                beginIndex = endIndex+2; //skip past ">>"                                
            }
            
            if ( !IndexNotFound )
            {
                // Here we get the trailing index and parse out the productID
                endIndex = inventorySelection.indexOf(":",beginIndex);

                if (endIndex < 0 ) {
                    IndexNotFound = true;
                } else {
                    productID = inventorySelection.substring(beginIndex,endIndex);
                }              
            }
           
            // Now we delete the inventory item indicated by the productID we
            // parsed out above from the indicated table.
            
            if ( !IndexNotFound )
            {
                jTextArea1.setText("");
                jTextArea1.append( "Deleting ProductID: " + productID );

                // set up a connection to the LeafTech database
                try
                {                
                    //load JDBC driver class for MySQL
                    Class.forName( "com.mysql.jdbc.Driver" );

                    //define the data source
                    String SQLServerIP = jTextField1.getText();
                    String sourceURL = "jdbc:mysql://" + SQLServerIP + ":3306/inventory";

                    //create a connection to the db
                    DBConn = DriverManager.getConnection(sourceURL,"remote","remote_pass");

                } catch (Exception e) {

                    errString =  "\nProblem connecting to database:: " + e;
                    jTextArea1.append(errString);
                    connectError = true;

                } // end try-catch
                
                //If there is no connection error, then we form the SQL statement
                //to delete the inventory item and then execute it.

                if (!connectError )
                {
                    try
                    {
                        s = DBConn.createStatement();

                        // if trees inventory selected
                        if (jRadioButton1.isSelected())
                        {
                            SQLstatement = ( "DELETE FROM trees WHERE product_code = '" + productID + "';");
                        }

                        // if shrubs inventory selected
                        if (jRadioButton2.isSelected())
                        {
                            SQLstatement = ( "DELETE FROM shrubs WHERE product_code = '" + productID + "';");
                        }

                        // if seeds inventory selected
                        if (jRadioButton3.isSelected())
                        {
                            SQLstatement = ( "DELETE FROM seeds WHERE product_code = '" + productID + "';");
                        }
   
                        // execute the delete query
                        
                        executeUpdateVal = s.executeUpdate(SQLstatement);

                        // let the user know all went well
                        
                        jTextArea1.append("\n\n" + productID + " deleted...");
                        jTextArea1.append("\n Number of items deleted: " + executeUpdateVal );


                    } catch (Exception e) {

                        errString =  "\nProblem with delete:: " + e;
                        jTextArea1.append(errString);

                    } // try
               
                } // connection check    
                                       
            } else {

                jTextArea1.setText("");
                jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");      

            }
        } else {

            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)"); 

        } // Blank string check        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Decrements the inventory count for a selected item
        int beginIndex;                     // Parsing index
        int endIndex;                       // Parsing index
        String productID = null;            // Product ID pnemonic
        Boolean IndexNotFound;              // Flag indicating a string index was not found.
        Boolean connectError = false;       // Error flag
        Connection DBConn = null;           // MySQL connection handle
        String errString = null;            // String for displaying errors
        int executeUpdateVal;               // Return value from execute indicating effected rows
        String msgString = null;            // String for displaying non-error messages
        ResultSet res = null;               // SQL query result set pointer
        String tableSelected = null;        // String used to determine which data table to use
        java.sql.Statement s = null;        // SQL statement pointer
        String SQLstatement1 = null;        // String for building SQL queries
        String SQLstatement2 = null;        // String for building SQL queries
        String inventorySelection = null;   // Inventory text string selected by user
        IndexNotFound = false;              // Flag indicating that a string index was not found
        
        // this is the selected line of text
        inventorySelection =  jTextArea1.getSelectedText();

        // make sure the selection is not blank
        if ( inventorySelection != null )
        {
            // get the product ID - here we get the leading index
            beginIndex = 0;
            endIndex = inventorySelection.indexOf(">>",beginIndex);

            if (endIndex < 0 ) {
                IndexNotFound = true;
            } else {
                beginIndex = endIndex+2; //skip past ">>"                                
            }
            
            if ( !IndexNotFound )
            {
                // Here we get the trailing index and parse out the productID
                endIndex = inventorySelection.indexOf(":",beginIndex);

                if (endIndex < 0 ) {
                    IndexNotFound = true;
                } else {
                    productID = inventorySelection.substring(beginIndex,endIndex);
                }              
            }
           
            // Now we decrement the inventory count of the item indicated by the productID we
            // parsed out above from the indicated table.
            
            if ( !IndexNotFound )
            {
                jTextArea1.setText("");
                jTextArea1.append( "Deleting ProductID: " + productID );

                // set up a connection to the LeafTech database
                try
                {                
                    //load JDBC driver class for MySQL
                    Class.forName( "com.mysql.jdbc.Driver" );

                    //define the data source
                    String SQLServerIP = jTextField1.getText();
                    String sourceURL = "jdbc:mysql://" + SQLServerIP + ":3306/inventory";

                    //create a connection to the db
                    DBConn = DriverManager.getConnection(sourceURL,"remote","remote_pass");

                } catch (Exception e) {

                    errString =  "\nProblem connecting to database:: " + e;
                    jTextArea1.append(errString);
                    connectError = true;

                } // end try-catch
                
                //If there is no connection error, then we form the SQL statement
                //to decrement the inventory item count and then execute it.

                if (!connectError )
                {
                    try
                    {
                        s = DBConn.createStatement();

                        // if trees inventory selected
                        if (jRadioButton1.isSelected())
                        {
                            SQLstatement1 = ("UPDATE trees set quantity=(quantity-1) where product_code = '" + productID + "';");
                            SQLstatement2 = ("SELECT * from trees where product_code = '" + productID + "';");
                            tableSelected = "TREES";
                        }

                        // if strubs inventory selected
                        if (jRadioButton2.isSelected())
                        {
                            SQLstatement1 = ("UPDATE shrubs set quantity=(quantity-1) where product_code = '" + productID + "';");
                            SQLstatement2 = ("SELECT * from shrubs where product_code = '" + productID + "';");
                            tableSelected = "SHRUBS";
                        }

                        // if seeds inventory selected
                        if (jRadioButton3.isSelected())
                        {
                            SQLstatement1 = ("UPDATE seeds set quantity=(quantity-1) where product_code = '" + productID + "';");
                            SQLstatement2 = ("SELECT * from seeds where product_code = '" + productID + "';");
                            tableSelected = "SEEDS";
                        }

                        // execute the update, then query the BD for the table entry for the item just changed
                        // and display it for the user
                        
                        executeUpdateVal = s.executeUpdate(SQLstatement1);
                        res = s.executeQuery(SQLstatement2);
                       
                        
                        jTextArea1.append("\n\n" + productID + " inventory decremented...");
                        
                        while (res.next())
                        {
                            msgString = tableSelected + ">> " + res.getString(1) + " :: " + res.getString(2) +
                            " :: "+ res.getString(3) + " :: " + res.getString(4);
                            jTextArea1.append("\n"+msgString);

                        } // while
                        
                        jTextArea1.append("\n\n Number of items updated: " + executeUpdateVal );

                    } catch (Exception e) {

                        errString =  "\nProblem with delete:: " + e;
                        jTextArea1.append(errString);

                    } // try
               
                } // connection check    
                                       
            } else {

                jTextArea1.setText("");
                jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");      

            }
        } else {

            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)"); 

        } // Blank string check
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
